// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { RealtimeChannel, RealtimePostgresChangesPayload } from '@supabase/supabase-js';

const SUPABASE_URL = "https://ofqhimejbqsbqjxghurz.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9mcWhpbWVqYnFzYnFqeGdodXJ6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQyNjU1MzIsImV4cCI6MjA1OTg0MTUzMn0.N1SwPdSiLt2mF4DYvUK2z7I4jF0XQQ-jME4OWYjvsXI";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  realtime: {
    timeout: 60000, // Increase timeout to 60 seconds
    params: {
      eventsPerSecond: 10
    }
  },
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
  },
});

// Helper functions for realtime subscriptions
export const subscribeToTable = (
  tableName: keyof Database['public']['Tables'],
  callback: (payload: RealtimePostgresChangesPayload<any>) => void,
  filter?: string
) => {
  let retryCount = 0;
  const maxRetries = 3;
  const retryDelay = 2000; // 2 seconds

  const setupSubscription = () => {
    const channel = supabase
      .channel(`public:${tableName}${filter ? `:${filter}` : ''}`)
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: tableName as string,
        },
        (payload) => callback(payload)
      )
      .subscribe((status) => {
        if (status === 'SUBSCRIBED') {
          console.log(`Successfully subscribed to ${tableName}`);
          retryCount = 0; // Reset retry count on successful subscription
        } else if (status === 'CLOSED' || status === 'CHANNEL_ERROR') {
          console.warn(`Subscription to ${tableName} ${status}, attempt ${retryCount + 1}/${maxRetries}`);
          if (retryCount < maxRetries) {
            retryCount++;
            setTimeout(() => {
              console.log(`Retrying subscription to ${tableName}...`);
              supabase.removeChannel(channel);
              setupSubscription();
            }, retryDelay * retryCount); // Exponential backoff
          } else {
            console.error(`Failed to subscribe to ${tableName} after ${maxRetries} attempts`);
          }
        }
      });

    return channel;
  };

  const channel = setupSubscription();
  return () => {
    supabase.removeChannel(channel);
  };
};

// Utility function to unsubscribe from all channels
export const unsubscribeAll = () => {
  supabase.getChannels().forEach(channel => {
    supabase.removeChannel(channel);
  });
};